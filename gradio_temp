pip install gradio


import gradio as gr

# 로그인 상태를 관리하는 전역 변수
logged_in = False

# 로그인 검증 함수 (아무 문자열 입력 가능)
def verify_login(username, password):
    global logged_in
    if username and password:
        logged_in = True
        return gr.update(visible=False), gr.update(visible=True)
    else:
        return gr.update(visible=True), gr.update(visible=False)

# 로그아웃 함수
def logout():
    global logged_in
    logged_in = False
    return gr.update(visible=True), gr.update(visible=False)

# 챗봇 대화 업데이트 함수
def update_chatbot_with_message(chat_history, sender, message):
    chat_history.append((sender, message))  # 지정된 발신자와 메시지 추가
    return chat_history

# 채팅 제출 시 응답 생성 (더미 예제 함수)
def submit(message, history):
    response_message = f"'{message}'에 대한 답변입니다."  # 질문에 대한 더미 답변
    history.append((message, response_message))  # 대화 기록에 추가
    return history, ""

# Gradio UI
with gr.Blocks(css=".gr-block { background-color: white; }") as iface:
    # 로그인 화면
    with gr.Row(visible=not logged_in) as login_screen:
        with gr.Column(scale=1, elem_id="login-container"):
            gr.Markdown("### 로그인", elem_id="login-title")
            username = gr.Textbox(label="아이디", placeholder="아이디를 입력하세요.")
            password = gr.Textbox(label="비밀번호", type="password", placeholder="비밀번호를 입력하세요.")
            login_btn = gr.Button("로그인")

    # 챗봇 화면
    with gr.Row(visible=logged_in) as chatbot_screen:
        gr.Markdown("# 보험 문서 챗봇\n보험 문서에 대해 물어보면 답하는 챗봇입니다.")

        # PDF 버튼 및 챗봇 UI
        with gr.Row():
            cancer_btn = gr.Button("생명보험")
            life_btn = gr.Button("손해보험")
            car_btn = gr.Button("자동차보험")
            glossary_btn = gr.Button("용어사전")  # 용어사전 버튼 추가

        chatbot = gr.Chatbot()
        msg = gr.Textbox(placeholder="뭐든지 물어보세요.", label="챗 입력")

        # 버튼 행
        with gr.Row():
            submit_btn = gr.Button("보내기")
            retry_btn = gr.Button("다시보내기 ↩")
            undo_btn = gr.Button("이전 채팅 삭제 ❌")
            clear_btn = gr.Button("전체 채팅 삭제 💫")

        # PDF 버튼 클릭 이벤트 설정
        cancer_btn.click(
            lambda chat_history: update_chatbot_with_message(chat_history, "생명보험", "생명보험 관련 정보를 물어보세요."),
            inputs=chatbot,
            outputs=chatbot
        )
        life_btn.click(
            lambda chat_history: update_chatbot_with_message(chat_history, "손해보험", "손해보험 관련 정보를 물어보세요."),
            inputs=chatbot,
            outputs=chatbot
        )
        car_btn.click(
            lambda chat_history: update_chatbot_with_message(chat_history, "자동차보험", "자동차보험 관련 정보를 물어보세요."),
            inputs=chatbot,
            outputs=chatbot
        )
        glossary_btn.click(
            lambda chat_history: update_chatbot_with_message(
                chat_history,
                "용어사전",
                (
                    "용어사전에 대한 정보는 다음 링크를 참조하세요:\n"
                    "- [보험 용어사전 1](https://www.hwgeneralins.com/lounge/dic/index.do)\n"
                    "- [보험 용어사전 2](https://m.blog.naver.com/blogfsc/220149083103)"
                )
            ),
            inputs=chatbot,
            outputs=chatbot
        )

        # 버튼 기능 연결
        submit_btn.click(submit, [msg, chatbot], [chatbot, msg])  # 메시지 제출
        retry_btn.click(lambda history: history, [chatbot], chatbot)  # 마지막 메시지 재처리
        undo_btn.click(lambda history: history[:-1] if history else history, [chatbot], chatbot)  # 마지막 메시지 삭제
        clear_btn.click(lambda: [], None, chatbot)  # 대화 기록 초기화
        logout_btn = gr.Button("로그아웃")  # 로그아웃 버튼
        logout_btn.click(logout, outputs=[login_screen, chatbot_screen])

    # 로그인 버튼 이벤트
    login_btn.click(
        verify_login,
        inputs=[username, password],
        outputs=[login_screen, chatbot_screen]
    )

# CSS 추가로 UI 구성
iface.css = """
#login-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    text-align: center;
    padding: 20px;
}

#login-title {
    font-size: 24px;
    margin-bottom: 20px;
}
"""

iface.launch()
