import gradio as gr

# 로그인 상태를 관리하는 전역 변수
logged_in = False
user_insurances = []  # 회원이 가입한 보험 상품 리스트

# 로그인 검증 함수 (간단히 아이디, 비밀번호 입력만으로 로그인 성공 처리)
def verify_login(username, password):
    global logged_in, user_insurances
    if username and password:
        logged_in = True
        # 로그인한 사용자에게 가입된 보험상품 설정 (예: 한화 보험사 연계)
        user_insurances = ["암보험", "뇌질환보험", "자동차보험", "상해보험"]
        return gr.update(visible=False), gr.update(visible=True)
    else:
        return gr.update(visible=True), gr.update(visible=False)

# 로그아웃 함수
def logout():
    global logged_in, user_insurances
    logged_in = False
    user_insurances = []
    return gr.update(visible=True), gr.update(visible=False)

# 챗봇 대화 업데이트 함수
def update_chatbot_with_message(chat_history, sender, message):
    chat_history.append((sender, message))  # 지정된 발신자와 메시지 추가
    return chat_history

# 채팅 제출 시 응답 생성 (더미 예제 함수)
def submit(message, history):
    response_message = f"'{message}'에 대한 답변입니다."  # 질문에 대한 더미 답변
    history.append((message, response_message))  # 대화 기록에 추가
    return history, ""

# 보험 문서 선택 시 챗봇 초기 메시지 설정 함수
def select_insurance(insurance_name, history):
    message = f"'{insurance_name}' 문서에 관해 무엇이든 물어보세요."
    history.append(("시스템", message))
    return history

# Gradio UI
with gr.Blocks(css=".gr-block { background-color: white; }") as iface:
    # 첫 번째 페이지 - 로그인 없이 기본 문답 가능
    with gr.Row(visible=not logged_in) as main_page:
        with gr.Column(scale=7):
            gr.Markdown("### 보험 문서에 관한 문답", elem_id="insurance-qna-title")
            public_chatbot = gr.Chatbot(type='messages')
            public_msg = gr.Textbox(placeholder="보험 문서에 대해 질문해보세요.", label="챗 입력")
            public_submit_btn = gr.Button("보내기")
            public_submit_btn.click(submit, [public_msg, public_chatbot], [public_chatbot, public_msg])
        
        with gr.Column(scale=3, elem_id="login-container", min_width=400):
            gr.Markdown("### 로그인 후 맞춤형 상담이 가능합니다.", elem_id="login-info")
            gr.Markdown("### 로그인", elem_id="login-title")
            username = gr.Textbox(label="아이디", placeholder="아이디를 입력하세요.")
            password = gr.Textbox(label="비밀번호", type="password", placeholder="비밀번호를 입력하세요.")
            login_btn = gr.Button("로그인")

    # 두 번째 페이지 - 로그인 후 사용자 보험 문서 관련 챗봇 기능
    with gr.Column(visible=logged_in) as chatbot_screen:
        gr.Markdown("### 사용자가 가입한 보험 문서에 관한 챗봇", elem_id="user-insurance-chat-title")
        chatbot = gr.Chatbot(type='messages')
        with gr.Row():
            for insurance in ["암보험", "뇌질환보험", "자동차보험", "상해보험"]:
                gr.Button(insurance).click(
                    lambda ins=insurance: select_insurance(ins, chatbot.value),
                    inputs=[chatbot],
                    outputs=[chatbot]
                )
        msg = gr.Textbox(placeholder="가입한 보험 문서에 대해 질문해보세요.", label="챗 입력")

        # 버튼 행
        with gr.Row():
            submit_btn = gr.Button("보내기")
            retry_btn = gr.Button("다시보내기 ↩")
            undo_btn = gr.Button("이전 채팅 삭제 ❌")
            clear_btn = gr.Button("전체 채팅 삭제 💫")
            logout_btn = gr.Button("로그아웃")  # 로그아웃 버튼

        # 버튼 기능 연결
        submit_btn.click(submit, [msg, chatbot], [chatbot, msg])  # 메시지 제출
        retry_btn.click(lambda history: history, [chatbot], chatbot)  # 마지막 메시지 재처리
        undo_btn.click(lambda history: history[:-1] if history else history, [chatbot], chatbot)  # 마지막 메시지 삭제
        clear_btn.click(lambda: [], None, chatbot)  # 대화 기록 초기화
        logout_btn.click(logout, outputs=[main_page, chatbot_screen])

    # 로그인 버튼 이벤트
    login_btn.click(
        verify_login,
        inputs=[username, password],
        outputs=[main_page, chatbot_screen]
    )

# CSS 추가로 UI 구성
iface.css = """
#login-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: auto;
    width: 100%;
    max-width: 400px;
    height: 100vh;
    text-align: center;
    padding: 20px;
}
#login-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: auto;
    width: 100%;
    max-width: 400px;
    height: 100vh;
    text-align: center;
    padding: 20px;
}

#login-title {
    font-size: 24px;
    margin-bottom: 20px;
}

#login-info {
    font-size: 18px;
    margin-top: 10px;
    margin-bottom: 20px;
}
#insurance-qna-title, #user-insurance-chat-title {
    font-size: 24px;
    margin-bottom: 20px;
}
"""

iface.launch()
